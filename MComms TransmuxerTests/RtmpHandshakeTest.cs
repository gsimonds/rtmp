using MComms_Transmuxer.RTMP;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using MComms_Transmuxer;
using MComms_Transmuxer.Common;

namespace MComms_TransmuxerTests
{
    
    
    /// <summary>
    ///This is a test class for RtmpHandshakeTest and is intended
    ///to contain all RtmpHandshakeTest Unit Tests
    ///</summary>
    [TestClass()]
    public class RtmpHandshakeTest
    {

        private readonly byte[] c1RawData =
            {
                0x76, 0x9E, 0x03, 0xC5, 0x00, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
                0x23, 0x48, 0x00, 0x00, 0xBE, 0x18, 0x00, 0x00, 0x84, 0x67, 0x00, 0x00,
                0xE1, 0x4A, 0x00, 0x00, 0x6C, 0x3D, 0x00, 0x00, 0xD6, 0x2C, 0x00, 0x00,
                0xAE, 0x72, 0x00, 0x00, 0x52, 0x69, 0x00, 0x00, 0x90, 0x5F, 0x00, 0x00,
                0x49, 0x16, 0x00, 0x00, 0xF1, 0x6D, 0x00, 0x00, 0xF1, 0x5A, 0x00, 0x00,
                0xBB, 0x41, 0x00, 0x00, 0xE9, 0x26, 0x00, 0x00, 0xEB, 0x01, 0x00, 0x00,
                0xB3, 0x0B, 0x00, 0x00, 0xA6, 0x2E, 0x00, 0x00, 0xDB, 0x12, 0x00, 0x00,
                0x3C, 0x15, 0x00, 0x00, 0x87, 0x7E, 0x00, 0x00, 0x0C, 0x39, 0x00, 0x00,
                0x3E, 0x0F, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x24, 0x01, 0x00, 0x00,
                0x5E, 0x30, 0x00, 0x00, 0x0D, 0x44, 0x00, 0x00, 0x1C, 0x49, 0x00, 0x00,
                0x06, 0x4D, 0x00, 0x00, 0xB7, 0x4D, 0x00, 0x00, 0x47, 0x15, 0x00, 0x00,
                0xDE, 0x54, 0x00, 0x00, 0xB3, 0x39, 0x00, 0x00, 0x12, 0x2D, 0x00, 0x00,
                0x4D, 0x07, 0x00, 0x00, 0xC8, 0x4D, 0x00, 0x00, 0x43, 0x64, 0x00, 0x00,
                0xBB, 0x66, 0x00, 0x00, 0x8B, 0x42, 0x00, 0x00, 0xA6, 0x26, 0x00, 0x00,
                0x1F, 0x70, 0x00, 0x00, 0x03, 0x5D, 0x00, 0x00, 0x5A, 0x7A, 0x00, 0x00,
                0x7D, 0x76, 0x00, 0x00, 0x09, 0x45, 0x00, 0x00, 0x38, 0x12, 0x00, 0x00,
                0x25, 0x3B, 0x00, 0x00, 0x1F, 0x1E, 0x00, 0x00, 0x5D, 0x6E, 0x00, 0x00,
                0xD4, 0x1A, 0x00, 0x00, 0xCB, 0x63, 0x00, 0x00, 0xFC, 0x6B, 0x00, 0x00,
                0x96, 0x7F, 0x00, 0x00, 0xF5, 0x7F, 0x00, 0x00, 0x45, 0x4E, 0x00, 0x00,
                0x3B, 0x32, 0x00, 0x00, 0x13, 0x22, 0x00, 0x00, 0x0D, 0x26, 0x00, 0x00,
                0x89, 0x6B, 0x00, 0x00, 0x0A, 0x03, 0x00, 0x00, 0x1C, 0x30, 0x00, 0x00,
                0xDB, 0x0B, 0x00, 0x00, 0xAE, 0x56, 0x00, 0x00, 0x32, 0x07, 0x00, 0x00,
                0x20, 0x01, 0x00, 0x00, 0x9A, 0x75, 0x00, 0x00, 0x50, 0x23, 0x00, 0x00,
                0xEE, 0x22, 0x00, 0x00, 0x40, 0x4B, 0x00, 0x00, 0x78, 0x58, 0x00, 0x00,
                0x36, 0x6B, 0x00, 0x00, 0xFD, 0x5C, 0x00, 0x00, 0x12, 0x3E, 0x00, 0x00,
                0x49, 0x1A, 0x00, 0x00, 0x32, 0x5F, 0x00, 0x00, 0xF6, 0x3B, 0x00, 0x00,
                0x9E, 0x3A, 0x00, 0x00, 0x7D, 0x79, 0x00, 0x00, 0x49, 0x5F, 0x00, 0x00,
                0xDC, 0x0D, 0x00, 0x00, 0xAD, 0x4C, 0x00, 0x00, 0x4F, 0x31, 0x00, 0x00,
                0x14, 0x5E, 0x00, 0x00, 0xF2, 0x4D, 0x00, 0x00, 0x44, 0x49, 0x00, 0x00,
                0x40, 0x2E, 0x00, 0x00, 0x66, 0x13, 0x00, 0x00, 0xD0, 0x1C, 0x00, 0x00,
                0x6B, 0x36, 0x00, 0x00, 0xC4, 0x66, 0x00, 0x00, 0x30, 0x42, 0x00, 0x00,
                0xB7, 0x7E, 0x00, 0x00, 0x32, 0x60, 0x00, 0x00, 0x3B, 0x2C, 0x00, 0x00,
                0xA1, 0x15, 0x00, 0x00, 0x22, 0x54, 0x00, 0x00, 0xF6, 0x3E, 0x00, 0x00,
                0x22, 0x08, 0x00, 0x00, 0x91, 0x59, 0x00, 0x00, 0x9D, 0x40, 0x00, 0x00,
                0xE1, 0x12, 0x00, 0x00, 0x8B, 0x79, 0x00, 0x00, 0x1F, 0x12, 0x00, 0x00,
                0xDA, 0x73, 0x00, 0x00, 0xB0, 0x58, 0x00, 0x00, 0xCA, 0x26, 0x00, 0x00,
                0x99, 0x36, 0x00, 0x00, 0x02, 0x09, 0x00, 0x00, 0xB9, 0x7B, 0x00, 0x00,
                0x72, 0x57, 0x00, 0x00, 0x9D, 0x13, 0x00, 0x00, 0x49, 0x70, 0x00, 0x00,
                0x2C, 0x69, 0x00, 0x00, 0x80, 0x4A, 0x00, 0x00, 0x7E, 0x18, 0x00, 0x00,
                0xC5, 0x16, 0x00, 0x00, 0x99, 0x68, 0x00, 0x00, 0xD5, 0x3C, 0x00, 0x00,
                0xE9, 0x13, 0x00, 0x00, 0x80, 0x40, 0x00, 0x00, 0xB2, 0x5D, 0x00, 0x00,
                0xEA, 0x33, 0x00, 0x00, 0xC9, 0x23, 0x00, 0x00, 0xCC, 0x48, 0x00, 0x00,
                0x53, 0x57, 0x00, 0x00, 0xBF, 0x60, 0x00, 0x00, 0x67, 0x5C, 0x00, 0x00,
                0xD6, 0x3C, 0x00, 0x00, 0xBF, 0x0F, 0x00, 0x00, 0x14, 0x2F, 0x00, 0x00,
                0xD6, 0x6A, 0x00, 0x00, 0x7E, 0x04, 0x00, 0x00, 0x2D, 0x42, 0x00, 0x00,
                0xDC, 0x54, 0x00, 0x00, 0x8E, 0x36, 0x00, 0x00, 0x66, 0x0D, 0x00, 0x00,
                0x83, 0x79, 0x00, 0x00, 0xEF, 0x75, 0x00, 0x00, 0x57, 0x46, 0x00, 0x00,
                0x49, 0x2C, 0x00, 0x00, 0x61, 0x3C, 0x00, 0x00, 0xFF, 0x2F, 0x00, 0x00,
                0x69, 0x6C, 0x00, 0x00, 0x8F, 0x28, 0x00, 0x00, 0x61, 0x3A, 0x00, 0x00,
                0xCD, 0x22, 0x00, 0x00, 0xD1, 0x7D, 0x00, 0x00, 0x1E, 0x26, 0x00, 0x00,
                0x9D, 0x5E, 0x00, 0x00, 0x9C, 0x48, 0x00, 0x00, 0x16, 0x19, 0x00, 0x00,
                0x72, 0x61, 0x00, 0x00, 0x72, 0x6B, 0x00, 0x00, 0xE6, 0x32, 0x00, 0x00,
                0x1D, 0x40, 0x00, 0x00, 0xF0, 0x71, 0x00, 0x00, 0x84, 0x03, 0x00, 0x00,
                0x4F, 0x7F, 0x00, 0x00, 0x4A, 0x49, 0x00, 0x00, 0x77, 0x06, 0x00, 0x00,
                0x02, 0x44, 0x00, 0x00, 0xD7, 0x18, 0x00, 0x00, 0xE8, 0x6B, 0x00, 0x00,
                0x39, 0x50, 0x00, 0x00, 0x2C, 0x54, 0x00, 0x00, 0x53, 0x19, 0x00, 0x00,
                0xCB, 0x6B, 0x00, 0x00, 0xC9, 0x0F, 0x00, 0x00, 0x12, 0x0E, 0x00, 0x00,
                0x1E, 0x5F, 0x00, 0x00, 0x33, 0x28, 0x00, 0x00, 0x74, 0x78, 0x00, 0x00,
                0x9E, 0x24, 0x00, 0x00, 0x0C, 0x2B, 0x00, 0x00, 0xF4, 0x11, 0x00, 0x00,
                0xD5, 0x5D, 0x00, 0x00, 0xD4, 0x6A, 0x00, 0x00, 0x9F, 0x5A, 0x00, 0x00,
                0xD4, 0x4C, 0x00, 0x00, 0xA4, 0x5F, 0x00, 0x00, 0x59, 0x20, 0x00, 0x00,
                0x7E, 0x12, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0xCF, 0x07, 0x00, 0x00,
                0x32, 0x67, 0x00, 0x00, 0x22, 0x6D, 0x00, 0x00, 0xF4, 0x1A, 0x00, 0x00,
                0xCC, 0x0E, 0x00, 0x00, 0xCF, 0x46, 0x00, 0x00, 0xD3, 0x01, 0x00, 0x00,
                0x90, 0x0E, 0x00, 0x00, 0x2D, 0x3A, 0x00, 0x00, 0x48, 0x60, 0x00, 0x00,
                0xD3, 0x57, 0x00, 0x00, 0x8F, 0x45, 0x00, 0x00, 0x75, 0x09, 0x00, 0x00,
                0xE6, 0x37, 0x00, 0x00, 0xD9, 0x19, 0x00, 0x00, 0x1D, 0x59, 0x00, 0x00,
                0x2A, 0x25, 0x00, 0x00, 0xE5, 0x37, 0x00, 0x00, 0xC0, 0x1D, 0x00, 0x00,
                0xF7, 0x49, 0x00, 0x00, 0x2B, 0x44, 0x00, 0x00, 0x78, 0x50, 0x00, 0x00,
                0x81, 0x14, 0x00, 0x00, 0x87, 0x40, 0x00, 0x00, 0x44, 0x7B, 0x00, 0x00,
                0x0E, 0x59, 0x00, 0x00, 0x5F, 0x76, 0x00, 0x00, 0x50, 0x18, 0x00, 0x00,
                0x00, 0x2B, 0x00, 0x00, 0xD4, 0x16, 0x00, 0x00, 0x61, 0x7F, 0x00, 0x00,
                0x8D, 0x3A, 0x00, 0x00, 0xBE, 0x7F, 0x00, 0x00, 0x7B, 0x0C, 0x00, 0x00,
                0x05, 0x50, 0x00, 0x00, 0x15, 0x0C, 0x00, 0x00, 0x07, 0x38, 0x00, 0x00,
                0x3B, 0x77, 0x00, 0x00, 0x33, 0x06, 0x00, 0x00, 0x82, 0x72, 0x00, 0x00,
                0x1F, 0x25, 0x00, 0x00, 0x18, 0x1D, 0x00, 0x00, 0x70, 0x62, 0x00, 0x00,
                0x92, 0x34, 0x00, 0x00, 0xDA, 0x19, 0x00, 0x00, 0x64, 0x50, 0x00, 0x00,
                0x54, 0x4D, 0x00, 0x00, 0xCE, 0x39, 0x00, 0x00, 0xB1, 0x3B, 0x00, 0x00,
                0x85, 0x4C, 0x00, 0x00, 0x3E, 0x51, 0x00, 0x00, 0x69, 0x6D, 0x00, 0x00,
                0x15, 0x6A, 0x00, 0x00, 0xF8, 0x4F, 0x00, 0x00, 0x46, 0x5C, 0x00, 0x00,
                0x6A, 0x48, 0x00, 0x00, 0x04, 0x30, 0x00, 0x00, 0x96, 0x17, 0x00, 0x00,
                0x73, 0x5E, 0x00, 0x00, 0x0E, 0x47, 0x00, 0x00, 0xD9, 0x73, 0x00, 0x00,
                0x16, 0x1F, 0x00, 0x00, 0x2F, 0x18, 0x00, 0x00, 0x67, 0x4D, 0x00, 0x00,
                0x68, 0x59, 0x00, 0x00, 0xD4, 0x4A, 0x00, 0x00, 0xF7, 0x2C, 0x00, 0x00,
                0x4A, 0x3F, 0x00, 0x00, 0x4A, 0x0A, 0x00, 0x00, 0xD0, 0x5E, 0x00, 0x00,
                0x57, 0x4E, 0x00, 0x00, 0x68, 0x4F, 0x00, 0x00, 0x76, 0x58, 0x00, 0x00,
                0xFA, 0x66, 0x00, 0x00, 0x16, 0x13, 0x00, 0x00, 0xBB, 0x49, 0x00, 0x00,
                0x11, 0x6F, 0x00, 0x00, 0xAD, 0x74, 0x00, 0x00, 0xAE, 0x4E, 0x00, 0x00,
                0x24, 0x5D, 0x00, 0x00, 0x88, 0x05, 0x00, 0x00, 0x79, 0x55, 0x00, 0x00,
                0xFE, 0x7C, 0x00, 0x00, 0x52, 0x28, 0x00, 0x00, 0xDB, 0x48, 0x00, 0x00,
                0x25, 0x27, 0x00, 0x00, 0x43, 0x16, 0x00, 0x00, 0xE5, 0x0D, 0x00, 0x00,
                0x3C, 0x6F, 0x00, 0x00, 0xF4, 0x6C, 0x00, 0x00, 0x45, 0x5F, 0x00, 0x00,
                0xD3, 0x13, 0x00, 0x00, 0xD8, 0x29, 0x00, 0x00, 0x28, 0x0A, 0x00, 0x00,
                0xCE, 0x09, 0x00, 0x00, 0x0B, 0x52, 0x00, 0x00, 0xF5, 0x68, 0x00, 0x00,
                0xC5, 0x45, 0x00, 0x00, 0x60, 0x39, 0x00, 0x00, 0x59, 0x34, 0x00, 0x00,
                0x3D, 0x26, 0x00, 0x00, 0x97, 0x3B, 0x00, 0x00, 0x27, 0x40, 0x00, 0x00,
                0x8A, 0x13, 0x00, 0x00, 0x59, 0x29, 0x00, 0x00, 0x76, 0x5E, 0x00, 0x00,
                0x2D, 0x28, 0x00, 0x00, 0xD0, 0x69, 0x00, 0x00, 0xC2, 0x7A, 0x00, 0x00,
                0xC9, 0x6F, 0x00, 0x00, 0xCD, 0x5C, 0x00, 0x00, 0x68, 0x26, 0x00, 0x00,
                0xD4, 0x78, 0x00, 0x00, 0x49, 0x10, 0x00, 0x00, 0x6A, 0x08, 0x00, 0x00,
                0x79, 0x64, 0x00, 0x00, 0x25, 0x43, 0x00, 0x00, 0x08, 0x4E, 0x00, 0x00,
                0x61, 0x7A, 0x00, 0x00, 0x40, 0x09, 0x00, 0x00, 0x14, 0x70, 0x00, 0x00,
                0xB1, 0x53, 0x00, 0x00, 0x3B, 0x29, 0x00, 0x00, 0x6A, 0x0D, 0x00, 0x00,
                0xA5, 0x40, 0x00, 0x00, 0x11, 0x1D, 0x00, 0x00, 0x28, 0x25, 0x00, 0x00,
                0xC1, 0x75, 0x00, 0x00, 0x8C, 0x46, 0x00, 0x00, 0xD6, 0x54, 0x00, 0x00,
                0xA9, 0x0E, 0x00, 0x00, 0x0B, 0x3F, 0x00, 0x00, 0x87, 0x30, 0x00, 0x00,
                0x97, 0x3F, 0x00, 0x00, 0x8C, 0x65, 0x00, 0x00, 0x2F, 0x41, 0x00, 0x00,
                0xF1, 0x30, 0x00, 0x00, 0x15, 0x58, 0x00, 0x00, 0x1D, 0x44, 0x00, 0x00,
                0x9A, 0x4D, 0x00, 0x00, 0x95, 0x32, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00,
                0x9B, 0x5A, 0x00, 0x00, 0xE1, 0x0C, 0x00, 0x00, 0xC0, 0x4F, 0x00, 0x00,
                0x7E, 0x6E, 0x00, 0x00, 0xE9, 0x3E, 0x00, 0x00, 0xA8, 0x5F, 0x00, 0x00,
                0x9A, 0x3F, 0x00, 0x00, 0xA7, 0x30, 0x00, 0x00, 0x86, 0x64, 0x00, 0x00,
                0xC2, 0x46, 0x00, 0x00, 0xB5, 0x2D, 0x00, 0x00, 0x54, 0x7A, 0x00, 0x00,
                0xBF, 0x50, 0x00, 0x00, 0x9A, 0x16, 0x00, 0x00, 0xE7, 0x2F, 0x00, 0x00,
                0xD9, 0x10, 0x00, 0x00, 0x23, 0x5F, 0x00, 0x00, 0xD1, 0x79, 0x00, 0x00,
                0x55, 0x4E, 0x00, 0x00, 0x90, 0x03, 0x00, 0x00, 0x38, 0x2A, 0x00, 0x00,
                0x28, 0x07, 0x00, 0x00, 0xD1, 0x51, 0x00, 0x00, 0xD9, 0x10, 0x00, 0x00,
                0x6C, 0x6C, 0x00, 0x00, 0xA1, 0x6E, 0x00, 0x00, 0x66, 0x4C, 0x00, 0x00,
                0x5E, 0x5C, 0x00, 0x00, 0x4E, 0x6D, 0x00, 0x00, 0xE1, 0x01, 0x00, 0x00,
                0x30, 0x10, 0x00, 0x00, 0x9C, 0x5A, 0x00, 0x00, 0xFE, 0x4E, 0x00, 0x00,
                0xD9, 0x1B, 0x00, 0x00, 0x71, 0x08, 0x00, 0x00, 0x9F, 0x15, 0x00, 0x00,
                0xE2, 0x4F, 0x00, 0x00, 0xA5, 0x2B, 0x00, 0x00, 0xE2, 0x28, 0x00, 0x00,
                0x0C, 0x2F, 0x00, 0x00, 0x9B, 0x54, 0x00, 0x00, 0xB4, 0x66, 0x00, 0x00,
                0x47, 0x67, 0x00, 0x00, 0x65, 0x43, 0x00, 0x00, 0x38, 0x4E, 0x00, 0x00,
                0x2A, 0x66, 0x00, 0x00, 0x46, 0x73, 0x00, 0x00, 0x89, 0x12, 0x00, 0x00,
                0xA9, 0x50, 0x00, 0x00, 0x82, 0x33, 0x00, 0x00, 0x79, 0x20, 0x00, 0x00,
                0x7A, 0x11, 0x00, 0x00, 0x76, 0x6D, 0x00, 0x00, 0x78, 0x08, 0x00, 0x00,
                0xC2, 0x36, 0x00, 0x00, 0x63, 0x49, 0x00, 0x00, 0xB1, 0x26, 0x00, 0x00
            };

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for DecodeC0
        ///</summary>
        [TestMethod()]
        public void DecodeC0Test()
        {
            PacketBufferAllocator allocator = new PacketBufferAllocator(8192, 1);
            PacketBuffer packetBuffer = allocator.LockBuffer();
            packetBuffer.Buffer[0] = 0x03;
            packetBuffer.ActualBufferSize = 1;
            PacketBufferStream dataStream = new PacketBufferStream(packetBuffer);
            RtmpHandshake actual = RtmpHandshake.DecodeC0(dataStream);
            Assert.IsNotNull(actual);
            Assert.AreEqual(RtmpIntMessageType.HandshakeC0, actual.MessageType);
        }

        /// <summary>
        ///A test for DecodeC1
        ///</summary>
        [TestMethod()]
        public void DecodeC1Test()
        {
            PacketBufferAllocator allocator = new PacketBufferAllocator(8192, 1);
            PacketBuffer packetBuffer = allocator.LockBuffer();
            c1RawData.CopyTo(packetBuffer.Buffer, 0);
            packetBuffer.ActualBufferSize = c1RawData.Length;
            PacketBufferStream dataStream = new PacketBufferStream(packetBuffer);
            RtmpHandshake actual = RtmpHandshake.DecodeC1(dataStream);
            Assert.IsNotNull(actual);
            Assert.AreEqual(RtmpIntMessageType.HandshakeC1, actual.MessageType);
        }

        /// <summary>
        ///A test for DecodeC2
        ///</summary>
        [TestMethod()]
        public void DecodeC2Test()
        {
            byte[] rawData =
            {
                0x05, 0xC5, 0xD0, 0x84, 0x03, 0x00, 0x01, 0x01, 0x42, 0x46, 0x5B, 0xB4,
                0xE9, 0x74, 0x2B, 0x65, 0x32, 0xFE, 0x1E, 0x4A, 0xC8, 0x7E, 0xAF, 0x13,
                0x97, 0x3F, 0x40, 0x3E, 0x61, 0xB7, 0x5A, 0xBC, 0x16, 0xE4, 0x15, 0xB1,
                0xDB, 0x89, 0xEE, 0x3B, 0xF6, 0x80, 0xD1, 0x11, 0x2E, 0xCF, 0x07, 0x74,
                0x09, 0x41, 0x57, 0xD9, 0xB1, 0x2D, 0x6B, 0x17, 0xBB, 0x69, 0xF7, 0x43,
                0x6F, 0xEB, 0x85, 0xB9, 0x70, 0x2D, 0x1D, 0x95, 0xF3, 0x2B, 0xA4, 0x05,
                0x4D, 0x27, 0x3A, 0x7D, 0x9D, 0x6D, 0x08, 0x19, 0x7D, 0x29, 0xFD, 0xB7,
                0x5A, 0x0D, 0xF7, 0x5F, 0x2E, 0xEC, 0x9A, 0x20, 0x25, 0xA5, 0x52, 0x21,
                0x0E, 0x37, 0x27, 0x1B, 0x37, 0x23, 0xF9, 0xF4, 0xBD, 0xA3, 0x39, 0x6A,
                0x8C, 0x93, 0x23, 0xCC, 0x30, 0xF2, 0x7A, 0x4D, 0xA0, 0xA0, 0xA9, 0x7E,
                0x52, 0x02, 0xFE, 0x23, 0x5B, 0x37, 0xAC, 0x3B, 0x65, 0xEA, 0xB2, 0xFA,
                0x5E, 0xA3, 0xB6, 0xAD, 0xFF, 0x23, 0x77, 0x5B, 0xFF, 0xAD, 0xA8, 0x15,
                0x1A, 0xD9, 0x18, 0x7A, 0x12, 0x71, 0xDC, 0x12, 0xBD, 0x88, 0xF8, 0x83,
                0xF6, 0x79, 0x62, 0xAE, 0x82, 0x3D, 0x27, 0x4C, 0x08, 0xD2, 0x15, 0x73,
                0x9B, 0x6A, 0xE4, 0x4F, 0x3C, 0xF1, 0x9D, 0xF2, 0x2E, 0x1E, 0xA0, 0x22,
                0x1A, 0x28, 0x4F, 0x80, 0x68, 0xC1, 0x32, 0x07, 0x7A, 0x29, 0xB2, 0x2D,
                0x64, 0xFC, 0x64, 0x7F, 0x12, 0xA1, 0x76, 0x49, 0xB7, 0x56, 0xA8, 0x94,
                0x28, 0x81, 0x2D, 0x25, 0x13, 0x81, 0x95, 0xCB, 0x2D, 0x39, 0xB6, 0x93,
                0x6F, 0x1E, 0x08, 0xF2, 0x11, 0x92, 0x37, 0xB9, 0xB7, 0x13, 0x89, 0x3C,
                0x4C, 0xEB, 0x61, 0x02, 0x0E, 0xD9, 0xD5, 0x4F, 0x65, 0x00, 0x02, 0x07,
                0x28, 0xB0, 0x1D, 0x45, 0x53, 0x81, 0x71, 0x32, 0xDC, 0xFC, 0xC4, 0x99,
                0xB0, 0xAA, 0xDA, 0x15, 0xEF, 0xAE, 0x96, 0xF9, 0x69, 0x1A, 0x4C, 0xEC,
                0x39, 0x61, 0x90, 0xE7, 0x84, 0x5C, 0x7D, 0x94, 0x60, 0x2C, 0x3C, 0x8D,
                0xAC, 0x7F, 0xF6, 0x73, 0xF6, 0x7B, 0xA9, 0x1F, 0x32, 0x0D, 0x91, 0xA0,
                0x6E, 0x7D, 0x54, 0xED, 0xA5, 0x4E, 0x33, 0x21, 0x18, 0x33, 0xA4, 0xA4,
                0xB8, 0x7A, 0xAF, 0xC1, 0x9A, 0xDB, 0xCB, 0xD5, 0x57, 0x98, 0x08, 0x84,
                0x0C, 0xB1, 0xD4, 0x49, 0x3E, 0xCC, 0x85, 0x75, 0x25, 0x98, 0xBE, 0x06,
                0x72, 0x53, 0x42, 0x2B, 0xC8, 0xDB, 0xF9, 0xB1, 0x88, 0x87, 0xB4, 0x7D,
                0x67, 0xCB, 0x04, 0xE8, 0x4F, 0x75, 0x1F, 0x2A, 0xCF, 0x70, 0xB7, 0xA7,
                0x2A, 0x2C, 0xE8, 0x45, 0xAE, 0x88, 0x21, 0x2E, 0x08, 0x2E, 0xF2, 0xBE,
                0xBD, 0x16, 0x6D, 0x31, 0xDD, 0xE8, 0xE2, 0x42, 0xFC, 0x2C, 0x2E, 0x53,
                0x55, 0x84, 0xB4, 0x78, 0xB3, 0x47, 0x06, 0x27, 0xCF, 0xE5, 0x35, 0x9E,
                0xF3, 0xF8, 0x9E, 0x19, 0x31, 0xC9, 0x6B, 0x12, 0x74, 0x7F, 0x3B, 0xED,
                0xDC, 0xCF, 0x54, 0x3F, 0x38, 0x10, 0x5E, 0xC2, 0xD6, 0x67, 0x59, 0xF0,
                0x8C, 0x81, 0xB5, 0x97, 0x3C, 0x5B, 0x99, 0x31, 0x74, 0x8D, 0xAA, 0x8F,
                0x00, 0x3D, 0xC4, 0x4C, 0x06, 0x30, 0x47, 0xBC, 0xAE, 0x2C, 0x54, 0x98,
                0x37, 0x5A, 0x78, 0xD4, 0x81, 0xD0, 0xE9, 0x93, 0xC9, 0x72, 0xDE, 0xDA,
                0x40, 0x81, 0x1A, 0xE9, 0x7B, 0x0A, 0xCC, 0x8D, 0x63, 0x38, 0x9D, 0xA4,
                0x8E, 0x4C, 0x80, 0x24, 0x6D, 0xB2, 0xA1, 0xB7, 0x88, 0xDA, 0x7E, 0xCD,
                0xC8, 0x3F, 0x7B, 0xDF, 0xF2, 0xF5, 0x00, 0xF0, 0xDD, 0xC1, 0xC3, 0xE9,
                0xF4, 0x01, 0xCB, 0x38, 0x0A, 0xCA, 0x0C, 0xC4, 0x33, 0x82, 0xD0, 0x0B,
                0xDF, 0xC8, 0x6B, 0xDC, 0x38, 0x78, 0x01, 0x3C, 0x06, 0x54, 0x62, 0x06,
                0x49, 0x87, 0xD3, 0xE2, 0x21, 0x59, 0x12, 0xAC, 0x98, 0x5A, 0x55, 0x9E,
                0x49, 0xBE, 0x3B, 0x2C, 0x9D, 0xF6, 0x22, 0xD4, 0xF7, 0xE0, 0x89, 0xEF,
                0xE8, 0xC0, 0x2B, 0x4D, 0x98, 0xD3, 0xCF, 0xC9, 0xCD, 0x8C, 0x0F, 0x52,
                0x5E, 0x72, 0xBB, 0xA9, 0xE8, 0x66, 0x42, 0x65, 0x4E, 0x21, 0x38, 0xEE,
                0xC6, 0xD0, 0x18, 0x43, 0x18, 0xDF, 0x0E, 0x27, 0x2B, 0xD8, 0x82, 0xCD,
                0xD6, 0xC1, 0x0F, 0x88, 0xA5, 0xA2, 0xF2, 0xB9, 0x94, 0x5B, 0x67, 0xC8,
                0xEF, 0x59, 0x5C, 0x40, 0xC8, 0x59, 0xB9, 0x96, 0x23, 0x3B, 0xF2, 0x1E,
                0x93, 0xBF, 0x5A, 0xC1, 0x8E, 0xF4, 0x8D, 0xBD, 0x24, 0x19, 0xD6, 0x49,
                0xBE, 0x90, 0xE0, 0xA5, 0x3C, 0xBC, 0x07, 0x49, 0x66, 0x5A, 0x9E, 0xB5,
                0x69, 0xA5, 0x09, 0x2C, 0x20, 0x2B, 0x22, 0x18, 0xF9, 0x09, 0x88, 0x9B,
                0x58, 0x99, 0xDF, 0xCB, 0x05, 0xCD, 0x12, 0x6F, 0x2B, 0x04, 0x04, 0xD1,
                0xF0, 0x1F, 0xC1, 0x39, 0xD8, 0x5D, 0x11, 0xD5, 0x4F, 0x9F, 0x0A, 0x4D,
                0xCE, 0x19, 0x52, 0x4D, 0x74, 0x21, 0x7F, 0x46, 0x5F, 0xC2, 0x53, 0x4B,
                0x37, 0xFC, 0xC5, 0x18, 0x91, 0xA8, 0xCB, 0x72, 0x7E, 0x14, 0x80, 0x68,
                0xF5, 0xDD, 0x80, 0x2C, 0xB6, 0x67, 0x0E, 0xF1, 0xEF, 0xC5, 0xA4, 0x51,
                0xD7, 0xFD, 0xEE, 0x6D, 0x2F, 0x41, 0xDA, 0xCC, 0x7D, 0xCD, 0x05, 0xBA,
                0x78, 0x4D, 0x6C, 0x2F, 0x21, 0xE8, 0xC4, 0xC6, 0xF1, 0x49, 0x98, 0xAE,
                0xE8, 0x2B, 0x61, 0xFB, 0x49, 0xF4, 0xA3, 0x71, 0xD0, 0xDC, 0xD8, 0xCC,
                0x2F, 0xAB, 0x04, 0x50, 0x62, 0x7B, 0x90, 0xA7, 0x72, 0x9D, 0xC9, 0xE1,
                0x91, 0xF8, 0x3E, 0x3F, 0x73, 0x50, 0x8A, 0xCF, 0xDC, 0x1E, 0xDD, 0x38,
                0x52, 0xFD, 0x48, 0x9F, 0xA6, 0x4B, 0xBC, 0x3F, 0xDC, 0x01, 0x61, 0xC5,
                0x02, 0x4F, 0x55, 0xC1, 0xB4, 0x0B, 0x4C, 0xD2, 0x9F, 0x6C, 0x18, 0x6A,
                0x72, 0xC4, 0x72, 0x17, 0x15, 0xCE, 0x88, 0xD9, 0x45, 0x1F, 0x9C, 0x0B,
                0x80, 0xA7, 0x57, 0x2C, 0xD6, 0x56, 0x5C, 0x52, 0x10, 0x8C, 0x1C, 0x62,
                0x84, 0x62, 0x5F, 0x58, 0xCA, 0xE6, 0xA4, 0x35, 0x82, 0x65, 0xD7, 0xA1,
                0xDB, 0xAC, 0xC8, 0xE7, 0xB4, 0x71, 0xA7, 0x3F, 0xDE, 0x77, 0x91, 0x35,
                0xE6, 0x1C, 0x29, 0x73, 0xF6, 0x38, 0x50, 0x31, 0xC4, 0xBB, 0x50, 0xCB,
                0x54, 0xD7, 0x8A, 0x71, 0x1B, 0x35, 0xA3, 0x02, 0x5E, 0x37, 0xF9, 0x8C,
                0x11, 0xBE, 0x04, 0x8F, 0x94, 0x5C, 0x80, 0xBC, 0x94, 0xC7, 0x79, 0xBC,
                0x53, 0x55, 0x61, 0xF6, 0xC3, 0xB1, 0x13, 0xA6, 0xA2, 0x94, 0xB2, 0x22,
                0x20, 0xB0, 0x67, 0xBA, 0xA3, 0x3B, 0x45, 0xDC, 0xF8, 0x4F, 0x84, 0xE7,
                0x4D, 0xBE, 0xBA, 0x2F, 0x3D, 0x79, 0x47, 0x02, 0xD0, 0xB9, 0x7F, 0x6D,
                0x30, 0x3E, 0xB1, 0xCE, 0x3B, 0xD7, 0x3C, 0x6D, 0x37, 0xBD, 0x31, 0x86,
                0xA0, 0x0C, 0x17, 0xA3, 0xF0, 0x82, 0xEC, 0x9C, 0xAA, 0x8B, 0x9F, 0xBC,
                0x58, 0x1D, 0x63, 0x61, 0xD1, 0x07, 0xFE, 0x43, 0x00, 0xB0, 0x11, 0x65,
                0xC2, 0xE7, 0x18, 0x06, 0x63, 0xD0, 0xE4, 0x5D, 0x3F, 0x0C, 0xB1, 0x55,
                0xD6, 0x83, 0xA6, 0x1E, 0x4A, 0xA6, 0x3C, 0xC2, 0x92, 0xCF, 0xE6, 0x96,
                0x10, 0x32, 0x88, 0xCD, 0x04, 0x3A, 0xEC, 0x7D, 0xD4, 0xE0, 0x61, 0xE5,
                0xA0, 0x7F, 0x52, 0x28, 0xC5, 0xF3, 0x0B, 0xE3, 0xE9, 0xEC, 0xD6, 0x0B,
                0xE6, 0x7F, 0xAB, 0x80, 0xA3, 0x21, 0x8A, 0x7A, 0x9C, 0x46, 0xED, 0x62,
                0x6A, 0x1C, 0xA2, 0xFA, 0x5D, 0xEE, 0x76, 0x25, 0xE4, 0x82, 0x84, 0x0B,
                0x0D, 0x82, 0xD5, 0x37, 0xB1, 0xB6, 0xE5, 0x3B, 0x45, 0x77, 0x60, 0x46,
                0x34, 0xEE, 0x03, 0x42, 0x68, 0x44, 0xE8, 0x9B, 0x68, 0xCA, 0xB2, 0xB7,
                0x60, 0x50, 0x68, 0x4F, 0x9F, 0xCC, 0x1A, 0x6B, 0xF6, 0xA5, 0xE0, 0x29,
                0xF1, 0x32, 0x13, 0xD3, 0x69, 0x0A, 0x83, 0xF4, 0x0F, 0xE3, 0xB6, 0x52,
                0xA5, 0x54, 0x52, 0x43, 0xE2, 0x51, 0x99, 0xD1, 0xDF, 0x09, 0x11, 0x33,
                0xC9, 0xA0, 0xA0, 0xBA, 0x5B, 0x5A, 0x7A, 0xD5, 0xEA, 0xC1, 0x66, 0x94,
                0xB8, 0xC6, 0xBC, 0x47, 0x35, 0x1F, 0x39, 0x5D, 0x21, 0x84, 0xDB, 0x72,
                0x05, 0x59, 0x4D, 0x1B, 0x5F, 0x44, 0x29, 0x01, 0x30, 0xAA, 0xFC, 0x0F,
                0x42, 0xE6, 0x07, 0xAA, 0x3A, 0xDB, 0xB1, 0xA2, 0xA7, 0xD7, 0x87, 0x94,
                0x34, 0x67, 0xEF, 0xFF, 0x07, 0x9D, 0x95, 0xFB, 0xD9, 0x68, 0xF2, 0xBB,
                0xE9, 0x6F, 0x3E, 0x5E, 0x02, 0xCE, 0x04, 0x2D, 0x63, 0xEF, 0xAF, 0x3B,
                0xA4, 0xBB, 0x10, 0x63, 0x11, 0x4F, 0x87, 0xD4, 0xCE, 0xD0, 0x6B, 0x20,
                0xB6, 0x03, 0xC9, 0x66, 0x3A, 0xA6, 0x33, 0x5E, 0x33, 0x76, 0x81, 0x21,
                0x7A, 0xB9, 0xE4, 0xCD, 0xE8, 0x19, 0x58, 0xE3, 0x89, 0xA3, 0x76, 0x48,
                0x55, 0x9B, 0xBD, 0x92, 0xDD, 0x29, 0x89, 0x68, 0xC8, 0x9C, 0x1C, 0xDE,
                0xB3, 0x14, 0x1B, 0x2E, 0x25, 0xEE, 0xE0, 0x92, 0x50, 0x49, 0xB8, 0x49,
                0xD7, 0x65, 0x76, 0xC1, 0x1A, 0x1D, 0xB6, 0x1A, 0xE4, 0x09, 0xAF, 0xB4,
                0x19, 0xB2, 0xE8, 0x64, 0x89, 0xA5, 0x6C, 0xF5, 0xC8, 0x61, 0xD5, 0x73,
                0x4A, 0x2D, 0x56, 0xC4, 0x36, 0xD9, 0xED, 0x71, 0xBC, 0x94, 0xE2, 0xBC,
                0xE4, 0xAA, 0xE7, 0x45, 0x3F, 0xAE, 0x23, 0x1B, 0x9E, 0x7E, 0x06, 0x12,
                0xA4, 0x6B, 0x78, 0x20, 0x98, 0xFC, 0x32, 0xDA, 0x1E, 0x00, 0x84, 0xC4,
                0xCD, 0xE5, 0xB7, 0x8D, 0xFA, 0xD7, 0x00, 0x75, 0xF2, 0xB2, 0x96, 0x31,
                0xC7, 0x3A, 0xCA, 0x70, 0xA5, 0x64, 0xD0, 0x7F, 0x14, 0x3C, 0x33, 0xF4,
                0x43, 0x7B, 0x66, 0xF6, 0xA7, 0x1A, 0xB1, 0x51, 0xB6, 0xA7, 0xAB, 0x0F,
                0x1D, 0x5B, 0x52, 0x04, 0x65, 0xBE, 0x2C, 0xC7, 0x78, 0x76, 0x1B, 0x93,
                0xDA, 0x14, 0xC1, 0xE7, 0xC1, 0xF2, 0xAB, 0x3B, 0xAC, 0xD5, 0x40, 0x2C,
                0xBE, 0x32, 0x30, 0xC8, 0xE1, 0xAE, 0xCC, 0x2E, 0x74, 0x41, 0x28, 0xA8,
                0xCE, 0x75, 0x9D, 0xEC, 0x32, 0x04, 0x11, 0x21, 0xC4, 0xB4, 0x0B, 0x8A,
                0xC6, 0xDF, 0x42, 0x7D, 0xCD, 0x11, 0x50, 0xA3, 0x57, 0x9C, 0x5F, 0xCC,
                0x2D, 0x58, 0x64, 0xBF, 0xBA, 0xCB, 0x81, 0xF0, 0x5F, 0x77, 0xA1, 0x6E,
                0xFC, 0x50, 0x44, 0x51, 0x4B, 0x73, 0x05, 0x01, 0x2B, 0x87, 0x68, 0xB1,
                0xC8, 0x4C, 0xCC, 0x99, 0x28, 0x6A, 0x2A, 0x1A, 0xE0, 0x40, 0x8D, 0x7D,
                0x8D, 0x3E, 0xC2, 0x14, 0x64, 0x12, 0x06, 0x75, 0x77, 0xEE, 0x29, 0xAC,
                0x17, 0xD4, 0x33, 0x70, 0xAE, 0x14, 0xA8, 0x5A, 0x03, 0x18, 0x4A, 0x32,
                0xAF, 0x91, 0x02, 0x84, 0xAA, 0x04, 0x7B, 0xDB, 0x3D, 0x82, 0xAF, 0x59,
                0xDB, 0x6D, 0x16, 0xB5, 0x47, 0xA8, 0x81, 0x75, 0x7C, 0xD8, 0x76, 0x5D,
                0x0E, 0x58, 0x61, 0xBE, 0x82, 0x5B, 0x50, 0xC4, 0xB9, 0x93, 0xC2, 0x71,
                0xE8, 0xB6, 0x20, 0x1A, 0xA3, 0x9A, 0xB2, 0xEC, 0xE6, 0x25, 0x61, 0xB7,
                0xED, 0x7D, 0x03, 0x95, 0x79, 0x0E, 0x70, 0x93, 0x96, 0x0C, 0xCB, 0x1E,
                0x0C, 0x63, 0xC8, 0xFB, 0xE9, 0x33, 0x1E, 0x39, 0xF6, 0x6F, 0xA8, 0xEA,
                0x11, 0xB0, 0x41, 0x90, 0x89, 0x7C, 0x3F, 0x67, 0x0B, 0x0D, 0xD3, 0xFF,
                0xBE, 0xF5, 0xEF, 0x5C, 0x4B, 0xCC, 0x07, 0xC1, 0xAB, 0x96, 0x24, 0x7E,
                0xC6, 0x0F, 0x56, 0x11, 0x07, 0xD7, 0x8D, 0x09, 0xB1, 0x60, 0x6C, 0x0F,
                0xE0, 0x22, 0xB6, 0x65, 0x61, 0x7F, 0x9B, 0x6F, 0xAE, 0xC2, 0x41, 0x7A,
                0x9F, 0xD7, 0x0B, 0xFD, 0xA6, 0x6D, 0x6D, 0x3E, 0x2D, 0x9B, 0x1E, 0x13
            };

            PacketBufferAllocator allocator = new PacketBufferAllocator(8192, 1);
            PacketBuffer packetBuffer = allocator.LockBuffer();
            rawData.CopyTo(packetBuffer.Buffer, 0);
            packetBuffer.ActualBufferSize = rawData.Length;
            PacketBufferStream dataStream = new PacketBufferStream(packetBuffer);
            RtmpHandshake actual = RtmpHandshake.DecodeC2(dataStream);
            Assert.IsNotNull(actual);
            Assert.AreEqual(RtmpIntMessageType.HandshakeC2, actual.MessageType);
        }

        /// <summary>
        ///A test for GenerateS0
        ///</summary>
        [TestMethod()]
        public void GenerateS0Test()
        {
            RtmpHandshake actual = RtmpHandshake.GenerateS0();
            Assert.AreEqual(0x03, actual.Version);
            Assert.AreEqual(RtmpIntMessageType.HandshakeS0, actual.MessageType);
        }

        /// <summary>
        ///A test for GenerateS1
        ///</summary>
        [TestMethod()]
        public void GenerateS1Test()
        {
            RtmpHandshake actual = RtmpHandshake.GenerateS1();
            Assert.AreEqual(RtmpIntMessageType.HandshakeS1, actual.MessageType);
        }

        /// <summary>
        ///A test for GenerateS2
        ///</summary>
        [TestMethod()]
        public void GenerateS2Test()
        {
            PacketBufferAllocator allocator = new PacketBufferAllocator(8192, 2);
            PacketBuffer packetBuffer = allocator.LockBuffer();
            c1RawData.CopyTo(packetBuffer.Buffer, 0);
            packetBuffer.ActualBufferSize = c1RawData.Length;
            PacketBufferStream dataStream = new PacketBufferStream(packetBuffer);
            RtmpHandshake target = RtmpHandshake.DecodeC1(dataStream);
            RtmpHandshake actual = target.GenerateS2();
            Assert.AreEqual(RtmpIntMessageType.HandshakeS2, actual.MessageType);
            Assert.AreEqual(target.Time, actual.Time);
            CollectionAssert.AreEqual(target.RandomBytes, actual.RandomBytes);
        }

        /// <summary>
        ///A test for ToRtmpChunk
        ///</summary>
        [TestMethod()]
        public void ToRtmpChunkTest()
        {
            RtmpHandshake target = RtmpHandshake.GenerateS0();
            Global.Allocator = new PacketBufferAllocator(Global.TransportBufferSize, 1);
            PacketBuffer actual = target.ToRtmpChunk();
            byte[] actualBuffer = new byte[actual.ActualBufferSize];
            Array.Copy(actual.Buffer, actualBuffer, actual.ActualBufferSize);
            byte[] correctBuffer = new byte[]
            {
                0x03,
            };
            CollectionAssert.AreEqual(correctBuffer, actualBuffer);
        }
    }
}
